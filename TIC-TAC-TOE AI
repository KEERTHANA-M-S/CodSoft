import random

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board):
    # Check rows
    for row in board:
        if all(cell == row[0] for cell in row) and row[0] != ' ':
            return row[0]

    # Check columns
    for col in range(3):
        if all(board[row][col] == board[0][col] and board[0][col] != ' ' for row in range(3)):
            return board[0][col]

    # Check diagonals
    if all(board[i][i] == board[0][0] and board[0][0] != ' ' for i in range(3)):
        return board[0][0]
    if all(board[i][2 - i] == board[0][2] and board[0][2] != ' ' for i in range(3)):
        return board[0][2]

    return None

def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)

def get_empty_cells(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

def minimax(board, depth, is_maximizing):
    scores = {'X': 1, 'O': -1, 'tie': 0}

    winner = check_winner(board)
    if winner:
        return scores[winner]

    if is_board_full(board):
        return scores['tie']

    empty_cells = get_empty_cells(board)

    if is_maximizing:
        best_score = float('-inf')
        for cell in empty_cells:
            i, j = cell
            board[i][j] = 'X'
            score = minimax(board, depth + 1, False)
            board[i][j] = ' '
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for cell in empty_cells:
            i, j = cell
            board[i][j] = 'O'
            score = minimax(board, depth + 1, True)
            board[i][j] = ' '
            best_score = min(score, best_score)
        return best_score

def get_best_move(board):
    best_move = None
    best_score = float('-inf')
    for cell in get_empty_cells(board):
        i, j = cell
        board[i][j] = 'X'
        score = minimax(board, 0, False)
        board[i][j] = ' '
        if score > best_score:
            best_score = score
            best_move = cell
    return best_move

def play_tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    players = ['X', 'O']
    current_player = random.choice(players)

    while True:
        print_board(board)

        if current_player == 'X':
            row, col = map(int, input("Enter your move (row and column): ").split())
            if board[row][col] == ' ':
                board[row][col] = 'X'
            else:
                print("Invalid move. Try again.")
                continue
        else:
            print("AI is making a move...")
            row, col = get_best_move(board)
            board[row][col] = 'O'

        winner = check_winner(board)
        if winner:
            print_board(board)
            print(f"{winner} wins!")
            break
        elif is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break

        current_player = 'O' if current_player == 'X' else 'X'

if __name__ == "__main__":
    play_tic_tac_toe()
